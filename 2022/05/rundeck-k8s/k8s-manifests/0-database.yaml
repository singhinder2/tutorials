apiVersion: v1
kind: Service
metadata:
  namespace: support-tools
  name: db-postgres-service
spec:
  selector:
    app: db-postgres
  type: NodePort
  ports:
    - name: socket
      protocol: TCP
      # See `kind-config.yaml` to understand why I configured port 30000!
      nodePort: 30000
      port: 5432
      targetPort: db-socket-port

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-postgres-deployment
  namespace: support-tools
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-postgres
  template:
    metadata:
      labels:
        app: db-postgres
    spec:
      containers:
        - name: db-postgres
          image: postgres:13.2-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
          ports:
            - name: db-socket-port
              containerPort: 5432
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi


---

apiVersion: v1
kind: Service
metadata:
  name: db-sqlserver-0
  namespace: support-tools
spec:
  type: NodePort
  selector:
    statefulset.kubernetes.io/pod-name: db-sqlserver-statefulset-0
  ports:
    - name: socket
      protocol: TCP
      # See `kind-config.yaml` to understand why I configured port 30001!
      nodePort: 30001
      port: 1433
      targetPort: db-socket-port

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-sqlserver-statefulset
  namespace: support-tools
spec:
  serviceName: "mssql"
  selector:
    matchLabels:
      app: db-sqlserver
  template:
    metadata:
      labels:
        app: db-sqlserver
    spec:
      securityContext:
        fsGroup: 10001
      containers:
        - name: mssql
          image: mcr.microsoft.com/mssql/server:2022-latest
          ports:
            - containerPort: 1433
              name: db-socket-port
          env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_ENABLE_HADR
              value: "1"
            - name: MSSQL_PID
              value: "Developer"
            - name: MSSQL_AGENT_ENABLED
              value: "1"
            - name: MSSQL_SA_PASSWORD
              value: "Password1"
          volumeMounts:
            - name: mssql
              mountPath: "/var/opt/mssql"
      volumes:
        - name: mssql
          emptyDir: { }

---

apiVersion: v1
kind: Service
metadata:
  name: minio-web-console
  namespace: support-tools
spec:
  type: NodePort
  selector:
    statefulset.kubernetes.io/pod-name: minio-0
  ports:
    - name: console
      protocol: TCP
      # See `kind-config.yaml` to understand why I configured port 30001!
      nodePort: 31000
      port: 9001
      targetPort: console

---

apiVersion: v1
kind: Service
metadata:
  name: minio-s3-service
  namespace: support-tools
spec:
  type: NodePort
  selector:
    statefulset.kubernetes.io/pod-name: minio-0
  ports:
    - name: s3
      protocol: TCP
      # See `kind-config.yaml` to understand why I configured port 30001!
      nodePort: 31001
      port: 9000
      targetPort: s3

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: support-tools
spec:
  serviceName: "minio"
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio:RELEASE.2024-10-29T16-01-48Z
          env:
            - name: MINIO_ROOT_USER
              value: "root"
            - name: MINIO_ROOT_PASSWORD
              value: "password"
          ports:
            - containerPort: 9001
              name: console
            - containerPort:  9000
              name: s3
          command: [ "minio", "server", "/s3-folder", "--console-address", "0.0.0.0:9001" ]
          startupProbe:
            exec:
              command: [ "mc", "ready", "local" ]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          livenessProbe:
            exec:
              command: [ "mc", "ready", "local" ]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          volumeMounts:
            - name: source
              mountPath: /source
          lifecycle:
            postStart:
              exec:
                # Create a bucket for Rundeck. You can check it by accessing the Minio console at http://localhost:9001
                command: [ "/bin/sh", "-c", "sleep 10 && /usr/bin/mc alias set myminio http://minio-0:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD && /usr/bin/mc mb myminio/rundeck-postgresql-bucket && /usr/bin/mc mb myminio/rundeck-sqlserver-bucket" ]
      volumes:
        - name: source
          hostPath:
            path: /path/to/tests/resources/s3/source
